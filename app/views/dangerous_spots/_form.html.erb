<%= form_with(model: dangerous_spot, local: true) do |form| %>
  <% if dangerous_spot.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(dangerous_spot.errors.count, "件のエラー") %> が発生したため送信されませんでした</h2>

      <ul>
        <% dangerous_spot.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= form.label :地名 %>
    <%= form.text_field :address, placeholder: "地名を入力" %>
  </div>

  <div class="field">
    <%= form.label :愚痴 %>
    <%= form.text_field :content, placeholder: "事象に対して一言" %>
  </div>

  <div class="field">
    <%= form.label :内容 %>
    <%= form.text_area :detail, placeholder: "内容を入力" %>
  </div>
  
  <div class="field d-none">
    <%= form.hidden_field :latitude,:value =>"", id: :latitude %>
  </div> 

  <div class="field d-none">
    <%= form.hidden_field :longitude,:value =>"", id: :longitude %>
  </div>

  <div class="task_list">
    <% Label.all.each do |label| %>
    <%= form.check_box :label_ids, { multiple: true, checked: label[:checked], disabled: label[:disabled], include_hidden: false }, label[:id] %>
    <%= label.name %>
    <% end %>
  </div>

  <div class="actions">
    <%= form.submit nil, class: "btn btn-success mt-2" %>
  </div>
<% end %>

<br>

<div class="input-group mb-3">
  <input id="address" type="text" id="txt-search" class="form-control input-group-prepend" placeholder="地名・地点を入力を入力"></input>
  <span class="input-group-btn input-group-append">
    <input type="button" id="btn-search" value="検索" class="btn btn-primary" onclick="codeAddress()"><i class="fas fa-search"></i> </input>
  </span>
</div>

<div id='map' class="p-2 w-100 bd-highlight"></div>

<style>
#map {
  height: 600px;
  width: 600px;
}
</style>

<script>
//初期マップの設定
let map
let marker


function initMap(){
  geocoder = new google.maps.Geocoder()
  if (typeof gon.dangerous_spot !== 'undefined'){
    let markerData = gon.dangerous_spot;
    map = new google.maps.Map(document.getElementById('map'), {
      center:  {lat: markerData['latitude'], lng: markerData['longitude']},
      zoom: 15,
    });
    marker = new google.maps.Marker({
      position:  {lat:  markerData['latitude'], lng: markerData['longitude']},
      map: map
   });
  } else {
    map = new google.maps.Map(document.getElementById('map'), {
      center:  {lat: 35.6803997, lng:139.7690174},  //東京
      zoom: 15,
    });
  }
}

//検索後のマップ作成
let geocoder
let aft
function codeAddress(){
  let inputAddress = document.getElementById('address').value;
  geocoder.geocode( { 'address': inputAddress}, function(results, status) {
    if (status == 'OK') {
        //マーカーが複数できないようにする
        if (aft == true){
            marker.setMap(null);
        }

        //新しくマーカーを作成する
        map.setCenter(results[0].geometry.location);
            marker = new google.maps.Marker({
            map: map,
            position: results[0].geometry.location,
            draggable: true // ドラッグ可能にする
        });

        //二度目以降か判断
        aft = true

        //検索した時に緯度経度を入力する
        document.getElementById('latitude').value = results[0].geometry.location.lat();
        document.getElementById('longitude').value = results[0].geometry.location.lng();

        // マーカーのドロップ（ドラッグ終了）時のイベント
        google.maps.event.addListener( marker, 'dragend', function(ev){
            // イベントの引数evの、プロパティ.latLngが緯度経度
            document.getElementById('latitude').value = ev.latLng.lat();
            document.getElementById('longitude').value = ev.latLng.lng();
        });
    } else {
      alert('該当する結果がありませんでした：' + status);
    }
  });   
}

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API'] %>&callback=initMap" async defer></script>